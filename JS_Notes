Day 2: 
  transform-origin style: This moves the origin of an object. By default it is 50% which is in the middle of the object, but 0% puts the 
  origin on the left side of the object, and 100% puts it on the right side.
  
  transition style: This makes any changes happen over some interval in seconds.
Day 3:
  So basically, this is teaching us to be able to put variables in our CSS. This is done
  by creating a :root style and puting the variables in there. An example looks like this:
    :root {
      --base: #ffc600;
      --spacing: 10px;
      --blur: 10px;
    }
  So -- before a name indicates that it is a variable. This is then used in the actual tags liket his:
    img {
      padding: var(--spacing);
      background: var(--base);
      filter: blur(var(--blur));
    }
  These have to be declared as a variable taking some sort of value.
  
  New event listener: 'change'
    - I assume that this is called whenever an input is changed. Maybe it can only be listened
    for on inputs?
    
  New event listener: 'mousemove'
    - Is pretty self-explanatory, but just be aware of its existence.
    
  Reminder: a data attribute is something that you have made up.
  
  Using this.dataset will show you all of the attributes in a tag that are data attributes
  
  Day 4: Array Methods
    -The filter method takes a function that needs to test the values in some way using logic. If they
    are true, then they are saved into another array.
    -Quick Tip: console.table() prints out a table.
    
    -the sort method takes a function that has two parameters. Then you need to use if/else statements to check
    if one is let's say bigger than the other. If that is what you are looking for, return 1, else return -1.
    The items will bubble up or down the list.
    -This is a great place to use the ternary operator (?)
    
    The reduce method takes two types of arguments. First, it takes a function, which in turn can take 4 parameters. The
    first one is the accumulator, to save the running values. And the last three are the same as forEach: 
    element, index, array. The last argument that the reduce method takes is the value you want the accumulator to start at. If 
    nothing is given in this parameter, then it will start at the first element of the array.
  
    -Can turn a node list into an array by using the Array.from() method
    -Can use multiple array methods on the same array by using them on different lines.
      ex: 
        const de = links
               .map(link => link.textContent);
               .filter(streetName => streetName.includes('de'));
               
    -reduce is very very flexible. You can give it an empty object as the 'running total' and have it count up 
    the instances of everything in the array.

  Day 5: Flex Panel Styling
     -You can set the display for something as flex, and it seems as if it will cause it to go horizontal
     rather than vertical. 
     -Then you can set the individual elements in the ^ larger one and set a style of flex: 1 to make them 
     spread evenly. If you set one of them to 5 for example, it would take up 5 times as much room as the others.
     
     -the > selector in the styling selects all IMMEDIATE descendants of the elements specified before it.
     
 Day 8: Fun with HTML5 Canvas
     -You don't draw directly on the canvas element. You have to specify the context you want, whether it is 2d or 3d. 
     -You can also set the canvas to the size of the window by setting canvas.width and canvas.height to window.width
     and window.height respectively.
     -There are a few configuration options for the canvas context. These are strokeStyle, lineJoin, and lineCap so far.
     -Then you can begin a path using ctx.beginPath();
     -an event in ctx has an offsetX and offsetY value which is the x and y coordinates
     -ctx.globalCompositeOperation : search it up. Gives a lot of different options to drawing.
     
 Day 9: Helpful Dev Tools Tricks
     -In the dev tools html section, you can right click on an element and select 'break on' and then 
     attribute modifications to cause it to open the debugger after being requested to modify an attribute
     -You can use %s and %i to interpolate into strings for console.log. This is very similar to what you have seen
     in c.
     -You can style text inside of the console.log by using %c before the text, and then passing in a string of styles.
     -console.warn(), console.error(), and console.info() will give you a warning, an error, and an info text respectively
     -console.assert(1 === 2, 'that is wrong'); This takes two arguments, a logic statement, and a string. If the statement
     returns false, it will display the string.
     -console.clear() clears the console.
     -console.dir(p) gives you a drop down of the methods of an element
     -You can group a bunch of console statements by using console.group('some parameter') at the beginning of the grouped
     section, and console.groupEnd('the same some parameter') at the end of the grouped section
        -starting with console.groupCollapsed() sets their default to be in a closed drop down menu
     -console.count('steve') counts how many times the argument was used in the dom or console
     -console.time('fetching data') starts a timer and prints the string to the screen. Then console.timeEnd('fetching data')
     ends the timer and prints the elapsed time to the screen.
     
 Day 14: Copy vs. Reference
     -Just like in C++, numbers, and booleans are pass by value, and arrays and objects are pass by reference.
     -Unlike in C++ though, strings are pass by value in JS, so they aren't really an array of characters anymore.
     -So to copy an array, you can just call slice on the whole array, with no arguments. This 'slices' the 
     entire array and returns it
     -or you can do this: array2 = [].concat(array1);
     -or finally, this: array2 = [... array1] //this is a spread
     -or finally finally, this: array2 = Array.from(array1);//using the array prototype
     
     -to copy an object, you can use:
        -const object2 = Object.assign({}, object1, {number: 99}); //this changes the number property to 99
     -***Object.assign is only one level deep. If you try to change a copy of an object on the second level,
     then it will change that level in the original object too.
     
 Day 15: Local Storage
     -By default, a form will refresh the page when it is submitted, so it is useful to use e.preventDefault()
     in the callback function for a 'submit' event listener
     -In the callback function for an event listener for a form, you can use this to refer to the form. 
     You can also use this.reset() to clear the form text field.
     -When storing in local storage, you need to store things as strings (which would mean most likely JSON for you)
     You can do this by calling localStorage.setItem('items', JSON.stringify(items)); The stringify converts the
     object or array that you passed into JSON
     -so to get it back, you can use JSON.parse(localStorage.getItem('items));
 Day 16: 
    -RegEx knowledge maybe: put whatever you want inside of these / /. You should go and learn this stuff
 
 
 Day 21: 
    -The navigator.geolocation object can give all sorts of useful information about the position.
 Day 22:
    -If you are using some effect that depends on the location of the window, then you can use window.scrollX
    and window.scrollY to correctly align the effects with the objects.
 Day 25:
    -When you add an event listener to an element in the DOM, it will trigger whenever that event is heard
    anywhere on it, even if there are other elements on top. You can decide the order that the events will happen
    based on different rules of capture
    -This is called bubbling. The browser will trigger a click on what you clicked on, but it will also trigger
    on everything above it in the tree as well.
    -When an event is 'captured', the event is logged from top down in the tree, then the bubbling starts from
    bottom to top
    -you can add a third argument to the addEventListener function: an options object. You can set the options
    object capture value to true, and the events will fire when they are being captured.
        Another thing you can add to this options object is the key 'once' which you set to true. This will
        listen for the event once, and then unbind itself. This is the equivalent of the removeEventListener function.
    -In your actual function that you pass to the addEventListener, you can call e.stopPropagation(); This will
    stop the capture from bubbling up.
    
 Day 26:
    -When you are using a callback function, the meaning of 'this' changes based on the type of function it is.
    A normal callback function will change the value of this, but an arrow callback function will inherit
    the this value from its parent.
    -A lot of the time, when you are wanting to see an effect on some element of the DOM, it is best 
    to add and remove classes, and then style the new classes. This will dynamically change webpages. 
    -A lot of the time, you will have to use getBoundingClientRect to find the x and y values for the element,
    and then you need to usually offset it by some other value to get it to fit. 
    
     
